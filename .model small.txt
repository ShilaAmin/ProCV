.model small
.stack 100h
.data
skill_prompt      db 0Dh, 0Ah, 'Enter skill (max 10 chars, press ENTER to skip): $'
prof_prompt       db 0Dh, 0Ah, 'Enter proficiency (e.g., Beginner): $'
entered_msg       db 0Dh, 0Ah, 'Your entered skills are:', 0Dh, 0Ah, '$'
skills            db 8 dup(10 dup(' '))     ; 8 skills × 10 chars
proficiency       db 8 dup(10 dup(' '))     ; 8 proficiencies × 10 chars
skill_count       db 0                      ; how many skills actually entered
.code
main:
    mov ax, @data
    mov ds, ax
    xor bx, bx      ; skill index (0 to 7)
input_loop:
    cmp bx, 8
    je display_skills
    ; Show skill prompt
    mov ah, 09h
    lea dx, skill_prompt
    int 21h
    ; Read skill into skills[bx * 10]
    mov si, bx
    mov cx, 10
    mov di, si
    shl di, 1        ; di = bx * 2
    shl di, 2        ; di = bx * 8
    add di, si       ; di = bx * 10
    lea dx, skills
    add dx, di
    call read_input
    cmp al, 0
    je display_skills   ; If ENTER was pressed with no input, skip to display
    ; Show proficiency prompt
    mov ah, 09h
    lea dx, prof_prompt
    int 21h
    lea dx, proficiency
    add dx, di
    call read_input
    inc bx           ; next skill slot
    jmp input_loop
display_skills:
    ; save number of skills
    mov skill_count, bl
    ; Show message
    mov ah, 09h
    lea dx, entered_msg
    int 21h
    xor si, si       ; index offset = 0
    xor bl, bl       ; skill index counter
print_loop:
    mov al, skill_count
    cmp bl, al
    jae done
    ; print skill
    lea dx, skills
    add dx, si
    call print_string
    ; print " ("
    mov dl, ' '
    mov ah, 02h
    int 21h
    mov dl, '('
    int 21h
    ; print proficiency
    lea dx, proficiency
    add dx, si
    call print_string
    ; print ")"
    mov dl, ')'
    int 21h
    ; newline
    mov dl, 0Dh
    int 21h
    mov dl, 0Ah
    int 21h
    add si, 10
    inc bl
    jmp print_loop
done:
    mov ah, 4Ch
    int 21h
; ------------------------------
; read_input: Reads up to 10 chars into [dx]
; returns AL=0 if Enter pressed directly
; ------------------------------
read_input:
    push cx
    push si
    push di
    mov si, dx      ; Move address from DX to SI for memory access
    xor cx, cx
.read_loop:
    mov ah, 01h
    int 21h
    cmp al, 0Dh
    je .check_enter
    mov [si], al
    inc si
    inc cl
    cmp cl, 10
    je .read_done
    jmp .read_loop
.check_enter:
    cmp cl, 0
    je .empty
    jmp .read_done
.empty:
    mov al, 0
    pop di
    pop si
    pop cx
    ret
.read_done:
    mov al, cl
    pop di
    pop si
    pop cx
    ret
; ------------------------------
; print_string: prints 10 chars from DS:DX
; ------------------------------
print_string:
    push cx
    push ax
    push si        ; Save SI since we'll use it
    
    mov si, dx     ; Copy address from DX to SI for memory access
    mov cx, 10
.print_loop2:
    mov al, [si]   ; Use SI instead of DX for memory access
    cmp al, ' '
    je .skip
    push si        ; Save SI before using DL
    mov dl, al
    mov ah, 02h
    int 21h
    pop si         ; Restore SI
.skip:
    inc si         ; Increment SI instead of DX
    loop .print_loop2
    
    pop si         ; Restore original SI
    pop ax
    pop cx
    ret
end main